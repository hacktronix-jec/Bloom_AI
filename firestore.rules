/**
 * @fileOverview Firestore Security Rules for the Bloom application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, allowing users to read and write their own profile data.
 * Citizen reports can be created by any authenticated user and are publicly readable.
 * Other data collections (bloomEvents, predictionModels, satelliteData) are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /bloomEvents/{bloomEventId}: Stores bloom event data.
 * - /predictionModels/{predictionModelId}: Stores AI prediction model data.
 * - /satelliteData/{satelliteDataId}: Stores satellite data and climate model datasets.
 * - /citizenReports/{citizenReportId}: Stores citizen science reports of bloom events.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Listing of users is not allowed.
 * - Bloom events, prediction models, and satellite data are publicly readable.
 * - Citizen reports can be created by any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'tFBnLE6iWCN93eFfxnWAY7QDa9D3' can create a profile with userId 'tFBnLE6iWCN93eFfxnWAY7QDa9D3'.
     * @allow (get, update, delete) User with UID 'tFBnLE6iWCN93eFfxnWAY7QDa9D3' can read/update/delete their own profile.
     * @deny (create) User with UID 'attackerUID' cannot create a profile with userId 'tFBnLE6iWCN93eFfxnWAY7QDa9D3'.
     * @deny (get, update, delete) User with UID 'attackerUID' cannot read/update/delete the profile of user 'tFBnLE6iWCN93eFfxnWAY7QDa9D3'.
     * @principle Enforces document ownership for writes; allows owner-only access.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to bloom event documents. Bloom events can be read by anyone but cannot be created, updated or deleted without authentication
     * @path /bloomEvents/{bloomEventId}
     * @allow (get, list) Any user can read bloom event data.
     * @deny (create, update, delete) No user can create, update, or delete bloom event data.
     * @principle Allows public read access but restricts writes.
     */
    match /bloomEvents/{bloomEventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to prediction model documents. Prediction models can be read by anyone but cannot be created, updated or deleted without authentication
     * @path /predictionModels/{predictionModelId}
     * @allow (get, list) Any user can read prediction model data.
     * @deny (create, update, delete) No user can create, update, or delete prediction model data.
     * @principle Allows public read access but restricts writes.
     */
    match /predictionModels/{predictionModelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to satellite data documents. Satellite data can be read by anyone but cannot be created, updated or deleted without authentication
     * @path /satelliteData/{satelliteDataId}
     * @allow (get, list) Any user can read satellite data.
     * @deny (create, update, delete) No user can create, update, or delete satellite data.
     * @principle Allows public read access but restricts writes.
     */
    match /satelliteData/{satelliteDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to citizen report documents.
     * @path /citizenReports/{citizenReportId}
     * @allow (get, list) Any user can read citizen reports.
     * @allow (create) Any authenticated user can create citizen reports.
     * @deny (update, delete) Only the report creator can update or delete citizen reports.
     * @principle Allows public read and authenticated creation, but restricts updates and deletes to the creator.
     */
    match /citizenReports/{citizenReportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }
        function isExistingOwner() {
        return isOwner() && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid; // Only signed-in users can create, and userId must match auth.uid
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }
  }
}