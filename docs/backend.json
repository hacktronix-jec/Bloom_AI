{
  "entities": {
    "BloomEvent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BloomEvent",
      "type": "object",
      "description": "Represents a plant blooming event detected or reported.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the bloom event."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the bloom event location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the bloom event location."
        },
        "species": {
          "type": "string",
          "description": "Plant species involved in the bloom event."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the bloom event.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the bloom event.",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "description": "Source of the bloom event data (e.g., MODIS, Landsat, Citizen Science)."
        },
        "confidenceLevel": {
          "type": "number",
          "description": "Confidence level of the bloom event detection (e.g., 0.0 to 1.0)."
        }
      },
      "required": [
        "id",
        "latitude",
        "longitude",
        "species",
        "startDate",
        "source"
      ]
    },
    "PredictionModel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PredictionModel",
      "type": "object",
      "description": "Represents the different AI prediction models used in the app.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the prediction model."
        },
        "modelName": {
          "type": "string",
          "description": "Name of the prediction model."
        },
        "version": {
          "type": "string",
          "description": "Version number of the model."
        },
        "description": {
          "type": "string",
          "description": "Description of the model and its functionality."
        },
        "trainingDataset": {
          "type": "string",
          "description": "Details about the training dataset used."
        },
        "accuracy": {
          "type": "number",
          "description": "The average accuracy of the models prediction (e.g., 0.0 to 1.0)."
        }
      },
      "required": [
        "id",
        "modelName",
        "version",
        "description"
      ]
    },
    "SatelliteData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SatelliteData",
      "type": "object",
      "description": "Represents the different types of satellite data and climate model datasets used for bloom event detection and prediction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the satellite data entry."
        },
        "dataType": {
          "type": "string",
          "description": "Type of satellite data (e.g., MODIS, Landsat, SMAP, MERRA-2)."
        },
        "dateAcquired": {
          "type": "string",
          "description": "Date the satellite data was acquired.",
          "format": "date-time"
        },
        "resolution": {
          "type": "string",
          "description": "Spatial resolution of the satellite data."
        },
        "dataURL": {
          "type": "string",
          "description": "URL where the satellite data can be accessed.",
          "format": "uri"
        },
        "bloomEventIds": {
          "type": "array",
          "description": "References to BloomEvents. (Relationship: SatelliteData 1:N BloomEvent)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "dataType",
        "dateAcquired",
        "resolution",
        "dataURL"
      ]
    },
    "CitizenReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CitizenReport",
      "type": "object",
      "description": "Represents a bloom event report submitted by a citizen scientist.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the citizen report."
        },
        "userId": {
          "type": "string",
          "description": "ID of the user who submitted the report."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the reported bloom event."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the reported bloom event."
        },
        "species": {
          "type": "string",
          "description": "Plant species reported by the citizen scientist."
        },
        "reportDate": {
          "type": "string",
          "description": "Date the report was submitted.",
          "format": "date-time"
        },
        "images": {
          "type": "array",
          "description": "Array of image URLs provided by the citizen scientist.",
          "items": {
            "type": "string"
          }
        },
        "notes": {
          "type": "string",
          "description": "Additional notes or observations from the citizen scientist."
        },
        "validationStatus": {
          "type": "string",
          "description": "Status of the report validation (e.g., pending, validated, rejected)."
        },
        "bloomEventId": {
          "type": "string",
          "description": "Reference to BloomEvent. (Relationship: BloomEvent 1:N CitizenReport)"
        }
      },
      "required": [
        "id",
        "userId",
        "latitude",
        "longitude",
        "species",
        "reportDate"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Stores user profile information.",
      "properties": {
        "uid": {
          "type": "string",
          "description": "The user's unique ID."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The user's email address."
        },
        "displayName": {
          "type": "string",
          "description": "The user's display name."
        },
        "photoURL": {
          "type": "string",
          "format": "uri",
          "description": "URL of the user's profile picture."
        },
        "lastLogin": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the user logged in."
        }
      },
      "required": [
        "uid"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/entities/UserProfile"
          },
          "description": "Stores user profile information. Users can read and write their own profile.",
          "rules": {
            "read": "request.auth.uid == userId",
            "write": "request.auth.uid == userId"
          }
        }
      },
      {
        "path": "/bloomEvents/{bloomEventId}",
        "definition": {
          "entityName": "BloomEvent",
          "schema": {
            "$ref": "#/backend/entities/BloomEvent"
          },
          "description": "Stores bloom event data detected or reported.  No specific authorization fields are needed as there is no user-specific data.",
          "params": [
            {
              "name": "bloomEventId",
              "description": "Unique identifier for the bloom event."
            }
          ]
        }
      },
      {
        "path": "/predictionModels/{predictionModelId}",
        "definition": {
          "entityName": "PredictionModel",
          "schema": {
            "$ref": "#/backend/entities/PredictionModel"
          },
          "description": "Stores AI prediction model data. No specific authorization fields are needed as there is no user-specific data.",
          "params": [
            {
              "name": "predictionModelId",
              "description": "Unique identifier for the prediction model."
            }
          ]
        }
      },
      {
        "path": "/satelliteData/{satelliteDataId}",
        "definition": {
          "entityName": "SatelliteData",
          "schema": {
            "$ref": "#/backend/entities/SatelliteData"
          },
          "description": "Stores satellite data and climate model datasets. No specific authorization fields are needed as there is no user-specific data.",
          "params": [
            {
              "name": "satelliteDataId",
              "description": "Unique identifier for the satellite data entry."
            }
          ]
        }
      },
      {
        "path": "/citizenReports/{citizenReportId}",
        "definition": {
          "entityName": "CitizenReport",
          "schema": {
            "$ref": "#/backend/entities/CitizenReport"
          },
          "description": "Stores bloom event reports submitted by citizen scientists. Users can create their own reports and read all reports.",
          "rules": {
              "read": "request.auth != null",
              "create": "request.auth.uid == request.resource.data.userId"
          },
          "params": [
            {
              "name": "citizenReportId",
              "description": "Unique identifier for the citizen report."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to store and manage bloom event data, prediction models, satellite data, and citizen reports for the BloomWatch AI application. Given that there's no user login page or profile, and thus no user-specific data, the data is stored in top-level collections. This approach simplifies data access and management since there are no user-specific permissions to consider.  Authorization Independence is achieved as there is no dependency between documents, and no complex authorization rules are required beyond basic data validation. The segregation of data types into distinct collections (`bloomEvents`, `predictionModels`, `satelliteData`, `citizenReports`) facilitates QAPs by enabling efficient and secure querying and listing of each data type."
  }
}